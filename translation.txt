読み込み:app/Console/Commands/Inspire.php
The console command name.	コンソールコマンド名
The console command description.	コンソールコマンドの説明
Execute the console command.	コンソールコマンドの実行

読み込み:app/Console/Kernel.php
The Artisan commands provided by your application.	アプリケーションで提供するArtisanコマンド
Define the application's command schedule.	アプリケーションのコマンド実行スケジュール定義

読み込み:app/Exceptions/Handler.php
A list of the exception types that should not be reported.	レポートしない例外タイプのリスト
Report or log an exception.	例外をレポート、もしくはログ
This is a great spot to send exceptions to Sentry, Bugsnag, etc.	ここはSentryやBugsnagなどに例外を送るために良い場所
Render an exception into an HTTP response.	HTTPレスポンスに設置する例外をレンダー

読み込み:app/Http/Controllers/Auth/AuthController.php
Registration & Login Controller	登録／ログインコントローラー
This controller handles the registration of new users, as well as the	このコントローラハンドラーは新ユーザーを登録し、同時に既存の
authentication of existing users. By default, this controller uses	ユーザーを認証します。デフォルトでこのコントローラーは振る舞いを
a simple trait to add these behaviors. Why don't you explore it?	追加するためにシンプルなトレイトを使用します。試してみませんか？
Create a new authentication controller instance.	新しい認証コントローラインスタンスの生成

読み込み:app/Http/Controllers/Auth/PasswordController.php
Password Reset Controller	パスワードリセットコントローラー
This controller is responsible for handling password reset requests	このコントローラーはパスワードリセットリクエストの処理に責任を持ち、その
and uses a simple trait to include this behavior. You're free to	振る舞いを取り込むために、シンプルなトレイトを使用しています。望み通りに
explore this trait and override any methods you wish to tweak.	調整するため、このトレイトを使い、メソッドをオーバーライドしてください。
Create a new password controller instance.	新しいパスワードコントローラーインスタンスの生成

読み込み:app/Http/Controllers/HomeController.php
Home Controller	ホームコントローラー
This controller renders your application's "dashboard" for users that	このコントローラーは認証済みのユーザーのアプリケーション
are authenticated. Of course, you are free to change or remove the	「ダッシュボード」をレンダーします。もちろん、希望に合わせ
controller as you wish. It is just here to get your app started!	コントローラーを変更したり削除したりしてください。ここからappがスタートします！
Create a new controller instance.	新しいコントローラーインスタンスの生成
Show the application dashboard to the user.	アプリケーションのダッシュボードをユーザーへ表示

読み込み:app/Http/Controllers/WelcomeController.php
Welcome Controller	Welcomeコントローラー
This controller renders the "marketing page" for the application and	このコントローラーはアプリケーションの「マーケティングページ」を
is configured to only allow guests. Like most of the other sample	レンダーし、ゲストのみに表示されるように設定されています。
controllers, you are free to modify or remove it as you desire.	他のコントローラサンプルと同様、好きなように変更したり、削除してください。
Create a new controller instance.	新しいコントローラーインスタンスの生成
Show the application welcome screen to the user.	アプリケーションのウェルカムページをユーザーへ表示

読み込み:app/Http/Kernel.php
The application's global HTTP middleware stack.	アプリケーションのグローバルHTTPミドルウェアスタック
The application's route middleware.	アプリケーションのルートミドルウェアスタック

読み込み:app/Http/Middleware/Authenticate.php
The Guard implementation.	Guardの実装
Create a new filter instance.	新しいフィルターインスタンス
Handle an incoming request.	送られてきたリクエストの処理

読み込み:app/Http/Middleware/RedirectIfAuthenticated.php
The Guard implementation.	Guardの実装
Create a new filter instance.	新しいフィルターインスタンス
Handle an incoming request.	送られてきたリクエストの処理

読み込み:app/Http/Middleware/VerifyCsrfToken.php
Handle an incoming request.	送られてきたリクエストの処理

読み込み:app/Http/routes.php
Application Routes	アプリケーションのルート
Here is where you can register all of the routes for an application.	ここでアプリケーションのルートを全て登録することが可能です。
It's a breeze. Simply tell Laravel the URIs it should respond to	簡単です。ただ、Laravelへ対応するURIと、そのURIがリクエスト
and give it the controller to call when that URI is requested.	されたときに呼び出されるコントローラーを指定してください。

読み込み:app/Providers/AppServiceProvider.php
Bootstrap any application services.	全アプリケーションサービスの初期化処理
Register any application services.	全アプリケーションサービスの登録
This service provider is a great spot to register your various container	このサービスプロバイダーは、アプリケーションの様々な
bindings with the application. As you can see, we are registering our	コンテナ結合を行うのに最適です。ご覧の通り、"Registrar"実装を
"Registrar" implementation here. You can add your own bindings too!	ここで登録しています。皆さんの結合も追加できますよ！

読み込み:app/Providers/BusServiceProvider.php
Registration & Login Controller	登録／ログインコントローラー
Register any application services.	全アプリケーションサービスの登録

読み込み:app/Providers/ConfigServiceProvider.php
Registration & Login Controller	登録／ログインコントローラー
This service provider is intended to provide a convenient location for you	このサービスプロバイダーは、アプリケーションが要求された
to overwrite any "vendor" or package configuration that you may want to	リクエスト／コマンドを処理する前に変更したい、"vendor"やパッケージの
modify before the application handles the incoming request / command.	設定をオーバーライトするため、便利な場所を提供することを意図しています。

読み込み:app/Providers/EventServiceProvider.php
The event handler mappings for the application.	アプリケーションのイベントハンドラーのマップ
Register any other events for your application.	アプリケーションのその他のイベントの登録

読み込み:app/Providers/RouteServiceProvider.php
This namespace is applied to the controller routes in your routes file.	この名前空間はルートファイルのコントローラールートへ適用されます。
In addition, it is set as the URL generator's root namespace.	さらに、URLジェネレーターのルート名前空間としても設定されます。
Define your route model bindings, pattern filters, etc.	ルートモデル結合、パターンフィルターなどを定義
Define the routes for the application.	アプリケーションのルートを定義

読み込み:app/Services/Registrar.php
Get a validator for an incoming registration request.	登録リクエストに対するvalidator取得
Create a new user instance after a valid registration.	登録内容の確認後、新しいユーザーインスタンスを生成

読み込み:app/User.php
Get a validator for an incoming registration request.	登録リクエストに対するvalidator取得
The attributes that are mass assignable.	複数代入を行う属性
The attributes excluded from the model's JSON form.	モデルのJSON形式に含めない属性

読み込み:bootstrap/app.php
Get a validator for an incoming registration request.	登録リクエストに対するvalidator取得
The first thing we will do is create a new Laravel application instance	最初に行うことは、Laravelの全コンポーネントを「糊」のように
which serves as the "glue" for all the components of Laravel, and is	まとめ、様々なパーツをシステムに全部結合させるIoCコンテナと
the IoC container for the system binding all of the various parts.	して動作する、アプリケーションインスタンスを新規に作成します。
Get a validator for an incoming registration request.	登録リクエストに対するvalidator取得
Next, we need to bind some important interfaces into the container so	次に、重要なインターフェイスを必要なときに依存解決できるように、
we will be able to resolve them when needed. The kernels serve the	コンテナへ結合する必要があります。アプリケーションにやってきた、
incoming requests to this application from both the web and CLI.	WebとCLIの両方からのリクエストに対し、カーネルは動作します。
Return The Application	アプリケーションを返す
This script returns the application instance. The instance is given to	このスクリプトはアプリケーションインスタンスを返します。インスタンスは、
the calling script so we can separate the building of the instances	実際のアプリケーションの実行とレスポンス送信から、インスタンスの
from the actual running of the application and sending responses.	構築を分離できるように、呼び出し元のスクリプトへ与えられます。

読み込み:bootstrap/autoload.php
Register The Composer Auto Loader	Composerのオートローダーの登録
Composer provides a convenient, automatically generated class loader	Composerはアプリケーションのために、自動的にクラスローダーを
for our application. We just need to utilize it! We'll require it	生成してくれます。それを利用しなくてはなりません！「手動」で
into the script here so that we do not have to worry about the	クラスをローディングする手間を省くため、ここでそのスクリプトを
loading of any our classes "manually". Feels great to relax.	読み込みましょう。リラックス、安心しましょう。
Include The Compiled Class File	コンパイル済みクラスファイルの読み込み
To dramatically increase your application's performance, you may use a	アプリケーションの効率を劇的に向上させるため、どのリクエストに
compiled class file which contains all of the classes commonly used	対しても共通して使用される全クラスを含んだ、コンパイル済みクラス
by a request. The Artisan "optimize" is used to create this file.	ファイルを使用しましょう。"optimize" Artisanコマンドで生成できます。

読み込み:config/app.php
Application Debug Mode	アプリケーションデバッグモード
When your application is in debug mode, detailed error messages with	アプリケーションをデバッグモードにすると、アプリケーションでエラーが発生する
stack traces will be shown on every error that occurs within your	たびにスタックトレースともに、詳細なエラーメッセージが表示されます。
application. If disabled, a simple generic error page is shown.	このモードでない場合、シンプルで一般利用者向きなエラーページが表示されます。
Application URL	アプリケーションURL
This URL is used by the console to properly generate URLs when using	このURLはArtisanコマンドラインツールを使用する時に正しい
the Artisan command line tool. You should set this to the root of	URLを生成するために使用します。アプリケーションのルートのURLを設定してください。
your application so that it is used when running Artisan tasks.	Artisanコマンドを実行する時に使用されます。
Application Timezone	アプリケーションタイムゾーン
Here you may specify the default timezone for your application, which	ここではアプリケーションのデフォルトタイムゾーンを指定します。これは
will be used by the PHP date and date-time functions. We have gone	PHPの日付／時間関数で使用されます。最初から未設定でも使用できるように
ahead and set this to a sensible default for you out of the box.	適切なデフォルトを設定してあります。
Application Locale Configuration	アプリケーションローカル設定
The application locale determines the default locale that will be used	アプリケーションローカルは翻訳サービスプロバイダーにより使用される
by the translation service provider. You are free to set this value	デフォルトローカルを指定します。アプリケーションで提供するローカルを
to any of the locales which will be supported by the application.	自由に設定してください。
Application Fallback Locale	アプリケーションフォールバック言語
The fallback locale determines the locale to use when the current one	フォールバック言語は現在のローカルが使用できない場合に、
is not available. You may change the value to correspond to any of	代替として使われます。アプリケーション全体に対して用意されている
the language folders that are provided through your application.	言語フォルダーに対応するコードであればどれでも使用可能です。
Encryption Key	暗号化キー
This key is used by the Illuminate encrypter service and should be set	このキーはIlluminate暗号化サービスで使用されます。ランダムな32文字を
to a random, 32 character string, otherwise these encrypted strings	セットしないと安全ではありません。アプリケーションをデプロイ
will not be safe. Please do this before deploying an application!	る前に、必ず変更してください。
Logging Configuration	ログ設定
Here you may configure the log settings for your application. Out of	ここではアプリケーションのログ設定を指定します。Laravelは
the box, Laravel uses the Monolog PHP logging library. This gives	初めから、Monolog PHPログライブラリーを使用しています。これは便利なように、
you a variety of powerful log handlers / formatters to utilize.	強力でバリエーション豊かなログハンドラー／フォーマッターを提供しています。
Available Settings:	使用可能な設定：
Autoloaded Service Providers	自動ロードされるサービスプロバイダー
The service providers listed here will be automatically loaded on the	ここにリストしたサービスプロバイダーはアプリケーションのリクエストに対し
request to your application. Feel free to add your own services to	自動的にロードされます。アプリケーションの機能を拡張するため、この配列へ
this array to grant expanded functionality to your applications.	自由に自分のサービスを付け加えてください。
Laravel Framework Service Providers...	Laravelフレームワークサービスプロバイダー
Application Service Providers...	アプリケーションサービスプロバイダー
Class Aliases	クラスエイリアス
This array of class aliases will be registered when this application	このクラスエイリアスの配列はこのアプリケーションが開始されると登録されます。
is started. However, feel free to register as many as you wish as	エイリアスをどんなに好きなだけ自由に登録しても、「遅延」ロードされるので、
the aliases are "lazy" loaded so they don't hinder performance.	パフォーマンスを妨げることはありません。

読み込み:config/auth.php
Default Authentication Driver	デフォルト認証ドライバー
This option controls the authentication driver that will be utilized.	このオプションは認証で使用するドライバーを設定します。
This driver manages the retrieval and authentication of the users	このドライバーはアプリケーションの保護領域へユーザーがアクセスする時の
attempting to get access to protected areas of your application.	認証とユーザーの取得を管理します。
Authentication Model	認証モデル
When using the "Eloquent" authentication driver, we need to know which	"Eloquent"認証ドライバーを使用する場合、ユーザー情報を取得する
Eloquent model should be used to retrieve your users. Of course, it	Eloquentモデルの指定が必要です。もちろん、通常は"User"モデル
is often just the "User" model but you may use whatever you like.	でしょうが、お好きなものをどうぞ。
Authentication Table	認証テーブル
When using the "Database" authentication driver, we need to know which	"Database"認証ドライバーを使用する場合、ユーザーを取得するための
table should be used to retrieve your users. We have chosen a basic	テーブルを指定する必要があります。基本的な値をデフォルトにしていますが、
default value but you may easily change it to any table you like.	お好きなテーブル名へ簡単に変更できます。
Password Reset Settings	パスワードリセット設定
Here you may set the options for resetting passwords including the view	ここではパスワードリマインダーの設定を行います。それにはパスワード
that is your password reset e-mail. You can also set the name of the	メールにリセットメールのビューも含まれます。また、リセット
table that maintains all of the reset tokens for your application.	トークンを保存しておくためのテーブル名も指定可能です。
The expire time is the number of minutes that the reset token should be	有効時間の"expire"に指定する分数は、良く考えてください。
considered valid. This security feature keeps tokens short-lived so	このトークン保存時間はセキュリティー機能で、短い時間ほど
they have less time to be guessed. You may change this as needed.	安全になります。ですが、必要に応じ変更可能です。

読み込み:config/cache.php
Default Cache Store	デフォルトキャッシュ保存場所
This option controls the default cache connection that gets used while	このオプションはこのキャッシュライブラリで使用するデフォルトの
using this caching library. This connection is used when another is	キャッシュ接続を制御します。この接続はキャッシュ機能にどこへ
not explicitly specified when executing a given caching function.	キャッシュするのか、明白に指定されていない場合に使用されます。
Cache Stores	キャッシュ保存場所
Here you may define all of the cache "stores" for your application as	ここでアプリケーションの全キャッシュ「保存場所」を定義し、
well as their drivers. You may even define multiple stores for the	同時にドライバーを指定します。キャッシュに保存するアイテムのグループ
same cache driver to group types of items stored in your caches.	タイプに対し、同じキャッシュドライバーを複数定義することもできます。
Cache Key Prefix	キャッシュキープレフィックス
When utilizing a RAM based store such as APC or Memcached, there might	APCやMemcachedのようなRAMベースでの保存法を使用する場合、
be other applications utilizing the same cache. So, we'll specify a	他のアプリケーションも使用しているかも知れません。衝突を避けるために
value to get prefixed to all our keys so we can avoid collisions.	全部のキーにプレフィックスをつけた値を指定します。

読み込み:config/compile.php
Additional Compiled Classes	追加のコンパイル対象クラス
Here you may specify additional classes to include in the compiled file	ここで`artisan optimize`コマンドにより作成される、
generated by the `artisan optimize` command. These should be classes	コンパイル済みファイルへ含める追加のクラスを指定できます。原則、
that are included on basically every request into the application.	アプリケーションの全リクエストで読み込まれるクラスを指定すべきです。
Compiled File Providers	コンパイル対象のプロバイダーファイル
Here you may list service providers which define a "compiles" function	ここでは、コンパイルしなくてはならない追加のファイルを返す"compiles"
that returns additional files that should be compiled, providing an	functionを定義している、サービスプロバイダーをリストします。
easy way to get common files from any packages you are utilizing.	使用しているパッケージから、共通ファイルを簡単に指定する手段です。

読み込み:config/database.php
PDO Fetch Style	PDO取得スタイル
By default, database results will be returned as instances of the PHP	デフォルトでデータベースの結果はPHP stdClassオブジェクトのインスタンスが
stdClass object; however, you may desire to retrieve records in an	リターンされます。しかし、ご希望であればレコードを単純な配列の形式でも
array format for simplicity. Here you can tweak the fetch style.	取得できます。ここで取得するスタイルを調整します。
Default Database Connection Name	デフォルトデータベース接続名
Here you may specify which of the database connections below you wish	ここでは全てのデータベース動作で用いられるデフォルトデータベース接続を
to use as your default connection for all database work. Of course	指定することができます。もちろん、データベースライブラリーを使用することで
you may use many connections at once using the Database library.	多くの接続を一度に使うことができます。
Database Connections	データベース接続
Here are each of the database connections setup for your application.	ここではアプリケーションで用いる各データベース接続を設定します。
Of course, examples of configuring each database platform that is	もちろん、以下はLaravelでサポートされているデータベースシステムの
supported by Laravel is shown below to make development simple.	サンプル設定で、簡単に開発ができることを示すため設置してあります。
All database work in Laravel is done through the PHP PDO facilities	Laravelで動作する全てのデータベースはPHP PDO機能上で動作します。
so make sure you have the driver for your particular database of	ですから開発を始める前に選択したデータベースのドライバーが開発機に
choice installed on your machine before you begin development.	インストールされていることを確認してください。
Migration Repository Table	マイグレーションリポジトリテーブル
This table keeps track of all the migrations that have already run for	こで指定したテーブルに、アプリケーションで実行済みの全マイグレーション
your application. Using this information, we can determine which of	情報が保存されます。この情報を使用することで、ディスク上の
the migrations on disk haven't actually been run in the database.	どのマイグレーションが未実行なのかを判断することができます。
Redis Databases	Redisデータベース
Redis is an open source, fast, and advanced key-value store that also	Redisはオープンソースで、早く、進歩的なキー／値保存システムであり
provides a richer set of commands than a typical key-value systems	APCやMemecachedのような典型的なキー／値システムよりも、豊富なコマンドが
such as APC or Memcached. Laravel makes it easy to dig right in.	用意されています。Laravelはこれを使用しやすくします。

読み込み:config/filesystems.php
Default Filesystem Disk
Here you may specify the default filesystem disk that should be used
by the framework. A "local" driver, as well as a variety of cloud
based drivers are available for your choosing. Just store away!
Supported: "local", "s3", "rackspace"
Default Cloud Filesystem Disk
Many applications store files both locally and in the cloud. For this
reason, you may specify a default "cloud" driver here. This driver
will be bound as the Cloud disk implementation in the container.
Filesystem Disks
Here you may configure as many filesystem "disks" as you wish, and you
may even configure multiple disks of the same driver. Defaults have
been setup for each driver as an example of the required options.

読み込み:config/mail.php
Mail Driver
Laravel supports both SMTP and PHP's "mail" function as drivers for the
sending of e-mail. You may specify which one you're using throughout
your application here. By default, Laravel is setup for SMTP mail.
Supported: "smtp", "mail", "sendmail", "mailgun", "mandrill", "log"
SMTP Host Address
Here you may provide the host address of the SMTP server used by your
applications. A default option is provided that is compatible with
the Mailgun mail service which will provide reliable deliveries.
SMTP Host Port
This is the SMTP port used by your application to deliver e-mails to
users of the application. Like the host we have set this value to
stay compatible with the Mailgun e-mail application by default.
Global "From" Address
You may wish for all e-mails sent by your application to be sent from
the same address. Here, you may specify a name and address that is
used globally for all e-mails that are sent by your application.
E-Mail Encryption Protocol
Here you may specify the encryption protocol that should be used when
the application send e-mail messages. A sensible default using the
transport layer security protocol should provide great security.
SMTP Server Username
If your SMTP server requires a username for authentication, you should
set it here. This will get used to authenticate with your server on
connection. You may also set the "password" value below this one.
SMTP Server Password
Here you may set the password required by your SMTP server to send out
messages from your application. This will be given to the server on
connection so that the application will be able to send messages.
Sendmail System Path
When using the "sendmail" driver to send e-mails, we will need to know
the path to where Sendmail lives on this server. A default path has
been provided here, which will work well on most of your systems.
Mail "Pretend"
When this option is enabled, e-mail will not actually be sent over the
web and will instead be written to your application's logs files so
you may inspect the message. This is great for local development.

読み込み:config/queue.php
Default Queue Driver
The Laravel queue API supports a variety of back-ends via an unified
API, giving you convenient access to each back-end using the same
syntax for each one. Here you may set the default queue driver.
Supported: "null", "sync", "database", "beanstalkd",
"sqs", "iron", "redis"
Queue Connections
Here you may configure the connection information for each server that
is used by your application. A default configuration has been added
for each back-end shipped with Laravel. You are free to add more.
Failed Queue Jobs
These options configure the behavior of failed queue job logging so you
can control which database and table are used to store the jobs that
have failed. You may change them to any database / table you wish.

読み込み:config/services.php
Third Party Services
This file is for storing the credentials for third party services such
as Stripe, Mailgun, Mandrill, and others. This file provides a sane
default location for this type of information, allowing packages
to have a conventional place to find your various credentials.

読み込み:config/session.php
Default Session Driver
This option controls the default session "driver" that will be used on
requests. By default, we will use the lightweight native driver but
you may specify any of the other wonderful drivers provided here.
Supported: "file", "cookie", "database", "apc",
"memcached", "redis", "array"
Session Lifetime
Here you may specify the number of minutes that you wish the session
to be allowed to remain idle before it expires. If you want them
to immediately expire on the browser closing, set that option.
Session Encryption
This option allows you to easily specify that all of your session data
hould be encrypted before it is stored. All encryption will be run
automatically by Laravel and you can use the Session like normal.
Session File Location
When using the native session driver, we need a location where session
files may be stored. A default has been set for you but a different
location may be specified. This is only needed for file sessions.
Session Database Connection
When using the "database" or "redis" session drivers, you may specify a
connection that should be used to manage these sessions. This should
correspond to a connection in your database configuration options.
Session Database Table
When using the "database" session driver, you may specify the table we
should use to manage the sessions. Of course, a sensible default is
provided for you; however, you are free to change this as needed.
Session Sweeping Lottery
Some session drivers must manually sweep their storage location to get
rid of old sessions from storage. Here are the chances that it will
happen on a given request. By default, the odds are 2 out of 100.
Session Cookie Name
Here you may change the name of the cookie used to identify a session
instance by ID. The name specified here will get used every time a
new session cookie is created by the framework for every driver.
Session Cookie Path
The session cookie path determines the path for which the cookie will
be regarded as available. Typically, this will be the root path of
your application but you are free to change this when necessary.
Session Cookie Domain
Here you may change the domain of the cookie used to identify a session
in your application. This will determine which domains the cookie is
available to in your application. A sensible default has been set.
HTTPS Only Cookies
By setting this option to true, session cookies will only be sent back
to the server if the browser has a HTTPS connection. This will keep
the cookie from being sent to you if it can not be done securely.

読み込み:config/view.php
View Storage Paths
Most templating systems load templates from disk. Here you may specify
an array of paths that should be checked for your views. Of course
the usual Laravel view path has already been registered for you.
Compiled View Path
This option determines where all the compiled Blade templates will be
stored for your application. Typically, this is within the storage
directory. However, as usual, you are free to change this value.

読み込み:database/migrations/2014_10_12_000000_create_users_table.php
Run the migrations.
Reverse the migrations.

読み込み:database/migrations/2014_10_12_100000_create_password_resets_table.php
Run the migrations.
Reverse the migrations.

読み込み:database/seeds/DatabaseSeeder.php
Run the database seeds.

読み込み:public/index.php
Register The Auto Loader
Composer provides a convenient, automatically generated class loader for
our application. We just need to utilize it! We'll simply require it
into the script here so that we don't have to worry about manual
Turn On The Lights
We need to illuminate PHP development, so let us turn on the lights.
This bootstraps the framework and gets it ready for use, then it
will load up this application so that we can run it and send
the responses back to the browser and delight our users.
Run The Application
Once we have the application, we can simply call the run method,
which will execute the request and send the response back to
the client's browser allowing them to enjoy the creative
and wonderful application we have prepared for them.

読み込み:resources/lang/en/pagination.php
Pagination Language Lines
The following language lines are used by the paginator library to build
the simple pagination links. You are free to change them to anything
you want to customize your views to better match your application.

読み込み:resources/lang/en/passwords.php
Password Reminder Language Lines
The following language lines are the default lines which match reasons
that are given by the password broker for a password update attempt
has failed, such as for an invalid token or invalid new password.

読み込み:resources/lang/en/validation.php
Validation Language Lines
The following language lines contain the default error messages used by
the validator class. Some of these rules have multiple versions such
as the size rules. Feel free to tweak each of these messages here.
Custom Validation Language Lines
Here you may specify custom validation messages for attributes using the
convention "attribute.rule" to name the lines. This makes it quick to
specify a specific custom language line for a given attribute rule.
Custom Validation Attributes
The following language lines are used to swap attribute place-holders
with something more reader friendly such as E-Mail Address instead
of "email". This simply helps us make messages a little cleaner.

読み込み:server.php
Laravel - A PHP Framework For Web Artisans
This file allows us to emulate Apache's "mod_rewrite" functionality from the
built-in PHP web server. This provides a convenient way to test a Laravel
application without having installed a "real" web server software here.

読み込み:artisan
Register The Auto Loader
Composer provides a convenient, automatically generated class loader
for our application. We just need to utilize it! We'll require it
into the script here so that we do not have to worry about the
loading of any our classes "manually". Feels great to relax.
Run The Artisan Application
When we run the console application, the current CLI command will be
executed in this console and the response sent back to a terminal
or another output device for the developers. Here goes nothing!
Shutdown The Application
Once Artisan has finished running. We will fire off the shutdown events
so that any final work may be done by the application before we shut
down the process. This is the last thing to happen to the request.

読み込み:gulpfile.js
Elixir Asset Management
Elixir provides a clean, fluent API for defining some basic Gulp tasks
for your Laravel application. By default, we are compiling the Less
file for our application, as well as publishing vendor resources.

読み込み:tests/ExampleTest.php
A basic functional test example.

読み込み:tests/TestCase.php
Creates the application.
